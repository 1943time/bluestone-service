// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model Device {
  id      String   @id
  name    String   @unique
  created DateTime @default(now())
  config  String   @default("{}")
  docs    Doc[]
  books   Book[]
  files   File[]
}

model Doc {
  id         String   @id @default(cuid())
  name       String   @unique
  filePath   String
  modifyTime DateTime @updatedAt
  schema     String   @default("[]")
  password   String?
  hash       String?
  deviceId   String
  views      Int      @default(0)
  device     Device   @relation(fields: [deviceId], references: [id], onDelete: Restrict)
  files      File[]

  @@unique([deviceId, filePath])
}

model Book {
  id         String    @id @default(cuid())
  path       String    @unique
  name       String
  filePath   String
  texts      String    @default("[]")
  views      Int       @default(0)
  password   String?
  config     String?
  map        String    @default("[]")
  deviceId   String
  device     Device    @relation(fields: [deviceId], references: [id], onDelete: Restrict)
  modifyTime DateTime  @updatedAt
  chapters   Chapter[]
  files      File[]

  @@unique([deviceId, filePath])
}

model Chapter {
  id         String   @id @default(cuid())
  path       String
  bookId     String
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Restrict)
  schema     String   @default("[]")
  hash       String?
  modifyTime DateTime @updatedAt

  @@unique([path, bookId])
}

model File {
  id       String   @id @default(cuid())
  name     String
  filePath String
  size     Int
  hash     String?
  created  DateTime @default(now())
  deviceId String?
  device   Device?  @relation(fields: [deviceId], references: [id])
  docId    String?
  doc      Doc?     @relation(fields: [docId], references: [id], onDelete: Restrict)
  bookId   String?
  book     Book?    @relation(fields: [bookId], references: [id], onDelete: Restrict)
}

// model FolderBackup {
//   id       String       @id @default(cuid())
//   name     String       @unique
//   filePath String
//   created  DateTime     @default(now())
//   files    BackupFile[]
// }
//
// model BackupFile {
//   id         String       @id @default(cuid())
//   filePath   String
//   name       String
//   markdown   String?
//   hash       String?
//   size       Int
//   modifyTime String
//   folderId   String
//   folder     FolderBackup @relation(fields: [folderId], references: [id])
// }
